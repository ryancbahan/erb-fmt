{
  "manifest": {
    "name": "erb-formatter",
    "version": "0.0.1",
    "type": "module",
    "main": "./dist/index.js",
    "types": "./dist/index.d.ts",
    "exports": {
      ".": {
        "import": "./dist/index.js",
        "types": "./dist/index.d.ts"
      },
      "./cli": "./dist/cli.js"
    },
    "bin": {
      "erbfmt": "dist/cli.js"
    },
    "files": [
      "dist"
    ],
    "scripts": {
      "build": "tsc",
      "start": "tsx src/cli.ts --format examples/sample.erb",
      "test": "vitest run",
      "lint": "node scripts/run-oxlint.mjs src tests scripts",
      "lint:fix": "node scripts/run-oxlint.mjs --fix src tests scripts",
      "format": "node scripts/run-oxfmt.mjs src tests scripts docs",
      "format:check": "node scripts/run-oxfmt.mjs --check src tests scripts docs",
      "smoke:install": "node scripts/smoke-install.mjs",
      "perf": "npm run build --silent && node scripts/perf.mjs"
    },
    "dependencies": {
      "tree-sitter": "^0.25.0",
      "tree-sitter-embedded-template": "0.25.0",
      "tree-sitter-html": "^0.23.0",
      "tree-sitter-ruby": "^0.23.0"
    },
    "devDependencies": {
      "oxfmt": "^0.3.0",
      "oxlint": "^0.3.0",
      "@types/node": "^20.14.10",
      "tsx": "^4.0.0",
      "typescript": "^5.5.0",
      "vitest": "^2.0.0"
    },
    "engines": {
      "node": ">=18"
    },
    "keywords": [
      "erb",
      "formatter",
      "html",
      "ruby"
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/your-org/erb-formatter.git"
    },
    "bugs": {
      "url": "https://github.com/your-org/erb-formatter/issues"
    },
    "homepage": "https://github.com/your-org/erb-formatter#readme",
    "_registry": "npm",
    "_loc": "/Users/ryanbahan/projects/erb-formatter/tmp/smoke-cache/yarn-cache/v6/.tmp/62d28586bb32dfc67e6ff6ddbff125d9/package.json",
    "readmeFilename": "README.md",
    "readme": "# ERB Formatter\n\nHigh-fidelity formatter for Ruby on Rails ERB templates. It pairs Tree-sitter\nparsing for HTML and embedded Ruby to normalise indentation, whitespace, and\nattribute layout while preserving placeholder content byte-for-byte.\n\n## Getting Started\n\n```sh\nnpm install --save-dev erb-formatter\n\n# format a template once\nnpx erbfmt app/views/dashboard/index.html.erb\n\n# format in-place and show debug segments\nnpx erbfmt --write --segments app/views/*.erb\n```\n\n- The CLI accepts a single file per invocation; wrap in a shell glob/loop when\n  formatting directories.\n- Pass `--config path/to/config.json` or `--config-file` to supply overrides. See\n  `docs/cli-usage.md` for flag details.\n- Configuration options mirror `FormatterConfig` (indentation, HTML wrapping,\n  whitespace behaviour). Sample files live under `examples/config/`.\n\n## Development Workflow\n\n```sh\nnpm install\nnpm run lint          # static analysis via oxlint\nnpm run format:check  # ensure files match oxfmt output\nnpm run build         # type-check & emit dist/\nnpm test              # unit + snapshot + property tests\nnpm run lint:fix      # auto-fix supported oxlint issues\nnpm run format        # rewrite files using oxfmt\nnpm run smoke:install # package-manager smoke tests (requires network)\nnpm run perf          # benchmark against large fixtures\n```\n\nAdditional guides:\n- `docs/snapshot-testing.md` – golden snapshot suite overview.\n- `docs/smoke-testing.md` – cross-package-manager installation checks.\n- `docs/property-testing.md` – property-style placeholder invariants.\n- `docs/formatter-roadmap.md` – architecture and future milestones.\n- `docs/contributing.md` – contributor workflow and review expectations.\n\n## Known Limitations & Future Work\n\n- **Placeholder HTML parse failures:** if the generated placeholder document\n  triggers Tree-sitter HTML errors, the formatter falls back to returning the\n  original source and emits an error diagnostic. Malformed HTML or unsupported\n  grammars therefore remain unformatted (`src/formatter/htmlDocument.ts`).\n- **Ruby formatting scope:** Ruby regions currently receive only inline\n  whitespace normalisation. Complex Ruby blocks (multi-line expressions, guard\n  clauses, stylistic rewrites) stay as-authored. Full Ruby reformatting can be\n  explored later (`src/formatter/rubyWhitespace.ts`).\n- **Sensitive blocks preserved verbatim:** content inside `<pre>`, `<code>`,\n  `<textarea>`, `<script>`, and `<style>` is emitted without structural changes.\n  Embedded JS/CSS is not reformatted (`src/formatter/htmlDocument.ts`).\n- **Attribute wrapping heuristics:** line-width calculations operate on\n  placeholder text. After reinserting Ruby, very long helpers may still exceed\n  the configured width (`src/formatter/htmlDocument.ts`).\n- **CLI scope:** the CLI processes one file per run and expects JSON configs. It\n  does not yet auto-discover configuration files or traverse directories\n  recursively (`src/cli.ts`).\n\nWe track additional enhancements and roadmap items in `docs/formatter-roadmap.md`.\n",
    "description": "High-fidelity formatter for Ruby on Rails ERB templates. It pairs Tree-sitter parsing for HTML and embedded Ruby to normalise indentation, whitespace, and attribute layout while preserving placeholder content byte-for-byte."
  },
  "artifacts": [],
  "remote": {
    "type": "tarball",
    "reference": "/Users/ryanbahan/projects/erb-formatter/tmp/smoke-cache/pack/erb-formatter-0.0.1.tgz",
    "registry": "npm",
    "hash": "",
    "cacheIntegrity": "sha1-Dr1nbpxvclFazBlynP2iQ724ye4="
  },
  "registry": "npm",
  "hash": "0ebd676e9c6f72515acc19729cfda243bdb8c9ee"
}